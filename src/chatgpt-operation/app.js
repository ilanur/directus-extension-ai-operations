import { defineOperationApp } from "@directus/extensions-sdk";

export default defineOperationApp({
	id: "chatgpt-operation",
	name: "ChatGPT Text Generator",
	icon: "forum",
	description: "ChatGPT Text Generator",
	overview: ({ system_messages }) => [
		{
			label: "System Messages",
			system_messages: system_messages,
		},
	],
	options: [
		{
			field: "system_messages",
			name: "System message content",
			type: "text",
			meta: {
				width: "full",
				interface: "text",
				special: null,
				options: {
					masked: false,
					placeholder: "Write a title (about 8-10 words) and a content (50-60 words) about...",
				}
			},
		},
		{
			field: "messages",
			name: "Messages",
			type: "string",
			meta: {
				field: "messages",
				width: "full",
				interface: "input-code",
				options: {
					language: "json",
					placeholder: JSON.stringify(
						[
							{
								role: "system",
								content:
									"The system message helps set the behavior of the assistant.",
							},
							{
								role: "user",
								content:
									"The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.",
							},
							{
								role: "assistant",
								content:
									"The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.",
							},
						],
						null,
						2
					),
					template: JSON.stringify(
						[
							{
								role: "system",
								content: "The system message.",
							},
							{
								role: "user",
								content: "The user messages.",
							},
							{
								role: "assistant",
								content: "The assistant messages.",
							},
						],
						null,
						2
					),
				},
			},
		},
		{
			field: 'model',
			name: 'OpenAI model',
			type: 'string',
			schema: {
				default_value: 'gpt-3.5-turbo',
			},
			meta: {
				field: 'model',
				special: null,
				interface: 'select-dropdown',
				options: {
					choices: [
						{
							text: 'gpt-3.5-turbo',
							value: 'gpt-3.5-turbo',
						},
						{
							text: 'gpt-4-1106-preview',
							value: 'gpt-4-1106-preview',
						},
						{
							text: 'gpt-4-32k',
							value: 'gpt-4-32k',
						},
						{
							text: 'gpt-3.5-turbo-16k',
							value: 'gpt-3.5-turbo-16k',
						},
					],
				},
				width: 'half',
				group: 'advanced',
			},
		},
		{
            field: 'json_return',
			name: 'Parse the response as JSON',
            type: 'boolean',
			schema: {
				default_value: true,
			},
            meta: {
				field: 'json_return',
                special: [ 'cast-boolean' ],
                interface: "boolean",
                options: null,
            }
        },
		{
			field: "temperature",
			name: "Temperature",
			type: "float",
			schema: {
				default_value: 0.5,
			},
			meta: {
				field: "temperature",
				special: null,
				interface: "slider",
				options: {
					minValue: 0,
					maxValue: 1,
					stepInterval: 0.01,
					alwaysShowValue: true,
				},
				width: "half",
				group: "advanced",
			},
		},
		{
			field: "max_tokens",
			name: "Maximum Length",
			type: "integer",
			schema: {
				default_value: null,
			},
			meta: {
				field: "max_tokens",
				special: null,
				interface: "input",
				options: {
					minValue: 1,
					maxValue: 4000,
					stepInterval: 1,
					placeholder: "Calculated automatically...",
				},
				width: "half",
				group: "advanced",
			},
		},
		{
			field: "top_p",
			name: "Top P",
			type: "float",
			schema: {
				default_value: 1,
			},
			meta: {
				field: "top_p",
				special: null,
				interface: "slider",
				options: {
					minValue: 0,
					maxValue: 1,
					stepInterval: 0.01,
					alwaysShowValue: true,
				},
				width: "half",
				group: "advanced",
			},
		},
		{
			field: "frequency_penalty",
			name: "Frequency Penalty",
			type: "float",
			schema: {
				default_value: 0,
			},
			meta: {
				field: "frequency_penalty",
				special: null,
				interface: "slider",
				options: {
					minValue: 0,
					maxValue: 2,
					stepInterval: 0.01,
					alwaysShowValue: true,
				},
				width: "half",
				group: "advanced",
			},
		},
		{
			field: "presence_penalty",
			name: "Presence Penalty",
			type: "float",
			schema: {
				default_value: 0,
			},
			meta: {
				field: "presence_penalty",
				special: null,
				interface: "slider",
				options: {
					minValue: 0,
					maxValue: 2,
					stepInterval: 0.01,
					alwaysShowValue: true,
				},
				width: "half",
				group: "advanced",
			},
		},
		{
			field: "api_key",
			name: "OpenAI API Key",
			type: "string",
			meta: {
				width: "full",
				interface: "input",
				special: null,
				options: {
					masked: true,
					placeholder: "Use globally set key...",
				},
				group: "advanced",
			},
		},
		{
			field: "advanced",
			name: "Advanced Settings",
			type: "alias",
			meta: {
				field: "advanced",
				special: ["alias", "no-data", "group"],
				interface: "group-detail",
				options: {
					start: "closed",
				},
				width: "full",
			},
		},
	],
});
